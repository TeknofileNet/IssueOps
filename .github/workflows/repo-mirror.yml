name: repo-mirror
run-name: 'Mirror repository: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issue_comment:
    types: [created]

jobs:
  repo-mirror-run:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/repo-mirror') &&
      contains(github.event.issue.labels.*.name, 'repo-mirror'))
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GH context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.TKFNET_ISSUEOPS_APP_ID }}
          private-key: ${{ secrets.TKFNET_ISSUEOPS_APP_KEY }}
          owner: ${{ github.repository_owner }}

      # https://github.com/marketplace/actions/issueops-form-parser
      - name: Parse Issue
        id: parser
        uses: issue-ops/parser@v4.1.0
        with:
          body: ${{ github.event.issue.body }}

      - name: Output Issue JSON
        id: output-issue
        run: echo "${{ steps.parser.outputs.json }}"

      - name: Set env vars
        run: |
          echo "SOURCE_REPO_PROVIDER=${{ fromJson(steps.parser.outputs.json).source_repo_provider }}" >> $GITHUB_ENV
          echo "SOURCE_REPO_URL=${{ fromJson(steps.parser.outputs.json).source_repo_url }}" >> $GITHUB_ENV
          echo "TARGET_ORGANIZATION=${{ fromJson(steps.parser.outputs.json).target_organization }}" >> $GITHUB_ENV

      # doing this again in case someone else renamed the issue
      - name: Rename issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `Mirror repository: ${process.env.SOURCE_REPO_URL}`
            })

      - name: Parse URL
        id: prase-src-url
        run: |
          GIT_URL=${{ fromJson(steps.parser.outputs.json).source_repo_url }}
          echo "Full URL: $GIT_URL"
          # Extract protocol
          PROTOCOL=$(echo "$GIT_URL" | sed -n 's#^\(https\)://.*#\1#p')

          # Extract host
          HOST=$(echo "$GIT_URL" | sed -n 's#^https://\([^/]*\)/.*#\1#p')

          # Extract org/owner
          OWNER=$(echo "$GIT_URL" | sed -n 's#^https://[^/]*/\([^/]*\)/.*#\1#p')

          # Extract repo
          REPO=$(echo "$GIT_URL" | sed -n 's#^https://[^/]*/[^/]*/\([^/.]*\).*#\1#p')

          echo "SRC_URL_PROTOCOL=$PROTOCOL" >> $GITHUB_ENV
          echo "SRC_URL_HOST=$HOST" >> $GITHUB_ENV
          echo "SRC_URL_OWNER=$OWNER" >> $GITHUB_ENV
          echo "SRC_URL_REPO_NAME=$REPO" >> $GITHUB_ENV

      - name: npm install
        run: npm i octokit@2.1.0 @actions/core

      - name: Delete Test Repo
        uses: actions/github-script@v7
        with:
          script: |
            const repositories = "docker-swag";
            await require('./.github/scripts/delete-repos.js') ({repositories});
        env:
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
          REPOSITORIES: "docker-swag"


      - name: Create Target Repo
        id: create-repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            return await github.rest.repos.createInOrg({
              org: context.repo.owner,
              name: process.env.SRC_URL_REPO_NAME,
              auto_init: false,
            })

      -  uses: actions/checkout@v4
         with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Push the upstream locally
        run: |
          echo "..."
          echo "PWD: $(pwd)"
          git clone --mirror ${{ env.SOURCE_REPO_URL }} ${{ env.SRC_URL_REPO_NAME }}
          ls -alh .
          cd ${{ env.SRC_URL_REPO_NAME }}
          echo "PWD: $(pwd)"
          git config --global user.name 'tkf-automation-bot'
          git config --global user.email 'tkf-automation-bot@users.noreply.github.com'
          git remote set-url origin  https://tkf-automation-bot:${{ steps.app-token.outputs.token }}@github.com/TeknofileNet/${{ env.SRC_URL_REPO_NAME }}.git
          git remote -v
          git push --mirror
