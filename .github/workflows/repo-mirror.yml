name: repo-mirror
run-name: 'Mirror repository: Issue #${{ github.event.issue.number }} by @${{ github.actor }}'

on:
  issue_comment:
    types: [created]

jobs:
  repo-mirror-run:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
      (startsWith(github.event.comment.body, '/repo-mirror') &&
      contains(github.event.issue.labels.*.name, 'repo-mirror'))
    permissions:
      contents: read
      issues: write

    steps:
      - uses: actions/checkout@v4
      - name: Write GH context to log
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          appId: ${{ vars.TKFNET_ISSUEOPS_APP_ID }}
          app-id: ${{ vars.TKFNET_ISSUEOPS_APP_ID }}
          private-key: ${{ secrets.TKFNET_ISSUEOPS_APP_KEY }}
          owner: ${{ github.repository_owner }}

      # https://github.com/marketplace/actions/issueops-form-parser
      - name: Parse Issue
        id: parser
        uses: issue-ops/parser@v4.1.0
        with:
          body: ${{ github.event.issue.body }}

      - name: Output Issue JSON
        id: output-issue
        run: echo "${{ steps.parser.outputs.json }}"

      - name: Set env vars
        run: |
          echo "SOURCE_REPO_PROVIDER=${{ fromJson(steps.parser.outputs.json).source_repo_provider }}" >> $GITHUB_ENV
          echo "SOURCE_REPO_URL=${{ fromJson(steps.parser.outputs.json).source_repo_url }}" >> $GITHUB_ENV
          echo "TARGET_ORGANIZATION=${{ fromJson(steps.parser.outputs.json).target_organization }}" >> $GITHUB_ENV

      # doing this again in case someone else renamed the issue
      - name: Rename issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              title: `Mirror repository: ${process.env.SOURCE_REPO_URL}`
            })

      - name: Parse URL
        id: prase-src-url
        run: |
          GIT_URL=${{ fromJson(steps.parser.outputs.json).source_repo_url }}
          echo "Full URL: $GIT_URL"
          # Extract protocol
          PROTOCOL=$(echo "$GIT_URL" | sed -n 's#^\(https\)://.*#\1#p')

          # Extract host
          HOST=$(echo "$GIT_URL" | sed -n 's#^https://\([^/]*\)/.*#\1#p')

          # Extract org/owner
          OWNER=$(echo "$GIT_URL" | sed -n 's#^https://[^/]*/\([^/]*\)/.*#\1#p')

          # Extract repo
          REPO=$(echo "$GIT_URL" | sed -n 's#^https://[^/]*/[^/]*/\([^/.]*\).*#\1#p')

          echo "SRC_URL_PROTOCOL=$PROTOCOL" >> $GITHUB_ENV
          echo "SRC_URL_HOST=$HOST" >> $GITHUB_ENV
          echo "SRC_URL_OWNER=$OWNER" >> $GITHUB_ENV
          echo "SRC_URL_REPO_NAME=$REPO" >> $GITHUB_ENV

      - name: Create Target Repo
        id: create-repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            return await github.rest.repos.createInOrg({
              org: context.repo.owner,
              name: process.env.SRC_URL_REPO_NAME,
              auto_init: true,
              allow_merge_commit: true,
              allow_rebase_merge: true,
              allow_squash_merge: true,
              delete_branch_on_merge: true,
              allow_update_branch: true,
            })

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          repository: ${{ github.repository_owner}}/${{ env.SRC_URL_REPO_NAME }}
          path: ${{ env.SRC_URL_REPO_NAME }}
      - name: Mirror Repo
        run: |
          echo $(pwd)
          ls -alh .
          find .
          git remote -v
          git clone --bare ${{ env.SOURCE_REPO_URL }}
          cd ${{ env.SRC_URL_REPO_NAME }}.git
          git push --mirror https://github.com/TeknofileNet/${{ env.SOURCE_REPO_URL }}
